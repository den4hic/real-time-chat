@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    @if (string.IsNullOrEmpty(userName))
    {
        <div class="form-group message-form">
            <input placeholder="Your name" @bind="userInput" size="50" class="message-input" />
            <button @onclick="SetUserName" class="send-button">Join</button>
        </div>
    }
    else
    {
    <div>
        <ul class="messages-list">
            @foreach (var message in messages)
            {
                <li class="@GetMessageClass(message)">@message</li>    
            }
        </ul>

        <hr/>

        <div class="form-group message-form">
            <input placeholder="Type your message" @bind="messageInput" size="50" class="message-input" />
            <button @onclick="Send" disabled="@(!IsConnected)" class="send-button">Send</button>
        </div>
    </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UserJoined", (user) =>
        {
            var joinMessage = $"{user} has joined the chat.";
            messages.Add(joinMessage);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UserLeft", (user) =>
        {
            var leaveMessage = $"{user} has left the chat.";
            messages.Add(leaveMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        StateHasChanged();
    }

    private async Task SetUserName()
    {
        if (!string.IsNullOrEmpty(userInput) && hubConnection != null)
        {
            userName = userInput;
            await hubConnection.SendAsync("JoinChat", userName);
            StateHasChanged();
        }
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput))
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendMessage", userName, messageInput);
                messageInput = string.Empty;
            }
        }
    }

    public bool IsConnected =>
            hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(userName))
        {
            await hubConnection.SendAsync("UserLeft", userName);
            await hubConnection.DisposeAsync();
        }
    }

    private string GetMessageClass(string message)
    {
        if (message.Contains("has joined the chat") || message.Contains("has left the chat"))
        {
            return "user-status";
        }
        else if (message.StartsWith($"{userName}:"))
        {
            return "my-message";
        }
        else
        {
            return "other-message";
        }
    }
}

<style>
    .chat-container {
        width: 50%;
        margin: auto;
    }

    .form-group {
        margin-bottom: 10px;
    }

    .message-form {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .message-input {
        flex-grow: 1;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    .send-button {
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        background-color: #007bff;
        color: white;
        font-size: 16px;
        cursor: pointer;
    }

    .send-button:disabled {
        background-color: #aaa;
        cursor: not-allowed;
    }

    .messages-list {
        list-style-type: none;
        padding: 0;
    }

    .messages-list li {
        padding: 5px 10px;
        margin-bottom: 5px;
        border-radius: 5px;
    }

    .user-status {
        background-color: #d4edda;
        color: #155724;
    }

    .my-message {
        background-color: #cce5ff;
        color: #004085;
        text-align: right;
    }

    .other-message {
        background-color: #f1f1f1;
        color: #333;
        text-align: left;
    }
</style>
