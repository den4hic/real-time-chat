@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using real_time_chat.Models
@using real_time_chat.Services
@rendermode InteractiveServer
@inject IUserService UserService
@inject IMessageService MessageService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    @if (string.IsNullOrEmpty(_userName))
    {
        <div class="form-group message-form">
            <input placeholder="Your name" @bind="_userInput" size="50" class="message-input" />
            <button @onclick="SetUserName" class="send-button">Join</button>
        </div>
    }
    else
    {
        <div class="chat-room">
            <div class="users-list">
                <h4>Active Users</h4>
                <ul>
                    @foreach (var user in _users)
                    {
                        <li>@user.Name</li>
                    }
                </ul>
            </div>
            <div class="messages-container">
                <ul class="messages-list">
                    @foreach (var message in _messages)
                    {
                        <li class="@GetMessageClass(message)">@(message.User.Name == "" ? "" : message.User.Name + ": ")@message.Text (@message.SentDate)</li>
                    }
                </ul>

                <hr/>

                <div class="form-group message-form">
                    <input placeholder="Type your message" @bind="_messageInput" size="50" class="message-input" />
                    <button @onclick="Send" disabled="@(!IsConnected)" class="send-button">Send</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private IList<Message> _messages = new List<Message>();
    private IList<User> _users = new List<User>();
    private string? _userInput;
    private string? _messageInput;
    private string? _userName;
    private User? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            _messages.Add(new Message { Text = message, SentDate = DateTime.Now, User = new User { Name = user } });
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("UserJoined", (user) =>
        {
            var joinMessage = $"{user} has joined the chat.";
            _messages.Add(new Message { Text = joinMessage, SentDate = DateTime.Now, User = new User { Name = "" } });
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string>("UserLeft", (user) =>
        {
            var leaveMessage = $"{user} has left the chat.";
            _messages.Add(new Message { Text = leaveMessage, SentDate = DateTime.Now, User = new User { Name = "" } });
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<List<string>>("UpdateUserList", (users) =>
        {
            _users = users.Select(u => new User { Name = u }).ToList();
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        await LoadMessages();
        await LoadUsers();
        StateHasChanged();
    }

    private async Task LoadMessages()
    {
        _messages = await this.MessageService.GetMessages();
    }

    private async Task LoadUsers()
    {
        _users = await this.UserService.GetUsers();
    }

    private async Task SetUserName()
    {
        if (!string.IsNullOrEmpty(_userInput) && _hubConnection != null)
        {
            _userName = _userInput;
            _currentUser = new User { Name = _userName };

            _currentUser = await this.UserService.PostUser(_currentUser);

            await _hubConnection.SendAsync("JoinChat", _userName);
            StateHasChanged();
        }
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(_messageInput) && _hubConnection != null && _currentUser != null)
        {
            var message = new Message
            {
                Text = _messageInput,
                SentDate = DateTime.Now,
                UserId = _currentUser.Id,
                User = _currentUser
            };
            await this.MessageService.PostMessage(message);
            
            await _hubConnection.SendAsync("SendMessage", _userName, _messageInput);
            _messageInput = string.Empty; 
            
        }
    }

    private bool IsConnected =>
            _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null && !string.IsNullOrEmpty(_userName))
        {
            await _hubConnection.SendAsync("UserLeft", _userName);
            await _hubConnection.DisposeAsync();
        }
    }

    private string GetMessageClass(Message message)
    {
        
        if (message.Text != null && (message.Text.Contains("has joined the chat") || message.Text.Contains("has left the chat")))
        {
            return "user-status";
        }
        else if (message.User.Name == _userName)
        {
            return "my-message";
        }
        else
        {
            return "other-message";
        }
    }
}

<style>
    .chat-container {
        margin: auto;
    }

    .form-group {
        margin-bottom: 10px;
    }

    .message-form {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .message-input {
        flex-grow: 1;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    .send-button {
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        background-color: #007bff;
        color: white;
        font-size: 16px;
        cursor: pointer;
    }

    .send-button:disabled {
        background-color: #aaa;
        cursor: not-allowed;
    }

    .messages-list {
        list-style-type: none;
        padding: 0;
    }

    .messages-list li {
        padding: 5px 10px;
        margin-bottom: 5px;
        border-radius: 5px;
    }

    .user-status {
        background-color: #d4edda;
        color: #155724;
    }

    .my-message {
        background-color: #cce5ff;
        color: #004085;
        text-align: right;
    }

    .other-message {
        background-color: #f1f1f1;
        color: #333;
        text-align: left;
    }

    .chat-room {
        display: grid;
        grid-template-columns: 1fr 3fr;
    }

    .users-list {
        flex: 1;
        margin-right: 20px;
    }

    .messages-container {
        flex: 3;
    }

    .users-list ul {
        list-style-type: none;
        padding: 0;
    }

    .users-list li {
        padding: 5px;
        background-color: #f8f9fa;
        margin-bottom: 5px;
        border-radius: 5px;
    }
</style>
